// import type { JsonObject } from "@liveblocks/client";

/** @see https://liveblocks.io */

import { createClient } from "@liveblocks/client";
import { createRoomContext } from "@liveblocks/react";

import { env } from "~/env";

const client = createClient({
  publicApiKey: env.NEXT_PUBLIC_LIVEBLOCKS_PUBLIC_KEY!,
  throttle: 16,

  // authEndpoint: "/api/auth",
  // throttle: 100,
});

// Presence represents the properties that exist on every user in the Room
// and that will automatically be kept in sync. Accessible through the
// `user.presence` property. Must be JSON-serializable.
// interface Presence extends JsonObject {
//   cursor: { x: number; y: number } | null;
// }
type Presence = {
  cursor: { x: number; y: number } | null;

  // cursor: { x: number, y: number } | null,
  // ...
};

// } & JsonObject;

// Optionally, Storage represents the shared document that persists in the
// Room, even after all users leave. Fields under Storage typically are
// LiveList, LiveMap, LiveObject instances, for which updates are
// automatically persisted and synced to all connected clients.
type Storage = {
  // author: LiveObject<{ firstName: string, lastName: string }>,
  // ...
};

// Optionally, UserMeta represents static/readonly metadata on each user, as
// provided by the own custom auth back end (if used). Useful for data that
// will not change during a session, like a user's name or avatar.
type UserMeta = {
  // id?: string,  // Accessible through `user.id`
  // info?: Json,  // Accessible through `user.info`
};

// Optionally, the type of custom events broadcast and listened to in this
// room. Use a union for multiple events. Must be JSON-serializable.
type RoomEvent = {
  // type: "NOTIFICATION",
  // ...
};

// Optionally, when using Comments, ThreadMetadata represents metadata on
// each thread. Can only contain booleans, strings, and numbers.
type ThreadMetadata = {
  // resolved: boolean;
  // quote: string;
  // time: number;
};

export const {
  suspense: {
    RoomProvider,
    useAddReaction,
    useBatch,
    useBroadcastEvent,
    useCanRedo,
    useCanUndo,
    useCreateComment,
    useCreateThread,
    useDeleteComment,
    useEditComment,
    useEditThreadMetadata,
    useErrorListener,
    useEventListener,
    useHistory,
    useList,
    useLostConnectionListener,
    useMap,
    useMutation,
    useMyPresence,
    useObject,
    useOther,
    useOthers,
    useOthersConnectionIds,
    useOthersMapped,
    useRedo,
    useRemoveReaction,
    useRoom,
    useSelf,
    useStatus,
    useStorage,
    useThreads,
    useUndo,
    useUpdateMyPresence,
    useUser,
  },
} = createRoomContext<Presence, Storage, UserMeta, RoomEvent, ThreadMetadata>(
  client,
  {
    async resolveMentionSuggestions({ roomId, text }) {
      // Used only for Comments. Return a list of userIds that match `text`.
      // These userIds are used to create a mention list when typing in the
      // composer. For example when you type "@jo", `text` will be `"jo"`,
      // and you should to return an array with John and Joanna's userIds:
      // ["john@example.com", "joanna@example.com"]

      const userIds = await __fetchAllUserIdsFromDB__(roomId);

      // Return all userIds if no `text`
      if (!text) {
        return userIds;
      }

      //
      // Otherwise, filter userIds for the search `text` and return
      return userIds.filter((userId) =>
        userId.toLowerCase().includes(text.toLowerCase()),
      );
    },

    // async resolveUsers({ userIds }) {
    async resolveUsers() {
      // Used only for Comments. Return a list of user information retrieved
      // from `userIds`. This info is used in comments, mentions etc.

      // const usersData = await __fetchUsersFromDB__(userIds);
      //
      // return usersData.map((userData) => ({
      //   name: userData.name,
      //   avatar: userData.avatar.src,
      // }));

      return [];
    },
  },
);
