// üî¥ DEPRECATED AND POSSIBLY WILL BE REMOVED IN RELIVATOR 1.3.0 üî¥ ||
// ================================================================= ||

/**
 * [drizzle-orm-mono] Drizzle ORM Configuration
 *
 * This script configures drizzle-orm with environment-specific settings,
 * including database connection details. The configuration relies on
 * env vars for setting the database provider and connection string.
 *
 * @see https://github.com/bs-oss/drizzle-orm-mono
 * @see https://orm.drizzle.team/kit-docs/config-reference
 * @see https://discord.com/channels/1043890932593987624/1043890932593987627/1153940001885794304
 */

// import * as dotenv from "dotenv";
import type { Config } from "drizzle-kit";
import { databasePrefix } from "~/../reliverse.config.ts";

import { env } from "./src/env";

// dotenv.config();
// dotenv.config({ path: ".env" });

// if (!env.NEXT_PUBLIC_DB_PROVIDER || !env.DATABASE_URL)
//   throw new Error(
//     "NEXT_PUBLIC_DB_PROVIDER or DATABASE_URL is not set in environment variables.",
//   );

// Add the ssl query parameter if it's missing
// let csMysql: string = addQueryParamIfMissed(
//   env.DATABASE_URL || "",
//   "ssl",
//   JSON.stringify({ rejectUnauthorized: true }),
// );
// let csPgsql: string = addQueryParamIfMissed(
//   env.DATABASE_URL || "",
//   "sslmode",
//   "require",
// );

// Connection strings for MySQL and PostgreSQL
const csMysql = env.DATABASE_URL;
const csPgsql = env.DATABASE_URL;
// const csMysql = `${env.DATABASE_URL}?ssl={"rejectUnauthorized":true}`;
// const csPgsql = `${env.DATABASE_URL}?sslmode=require`;

// Initialize configuration variables
// type MysqlCredentials = { url: string };
// type PgsqlCredentials = { url: string };
// let dbCredentials: MysqlCredentials | PgsqlCredentials;
let dialect: "mysql" | "postgresql" | "sqlite";
let schema: string;
let out: string;
let dbProvider = env.NEXT_PUBLIC_DB_PROVIDER;

/**
 * Configure this based on the database provider.
 * Feel free to add/remove/edit things if needed.
 */
try {
  // Set default DB provider based on DATABASE_URL
  // if NEXT_PUBLIC_DB_PROVIDER is not specified
  if (!dbProvider) {
    const databaseUrl = env.DATABASE_URL || "";
    if (databaseUrl?.startsWith("mysql://")) {
      dbProvider = "private-mysql";
      csMysql = env.DATABASE_URL;
    } else if (databaseUrl?.startsWith("postgres://")) {
      dbProvider = "private-postgres";
      csPgsql = env.DATABASE_URL;
    }
  }

  switch (dbProvider) {
    case "private-mysql":
    case "planetscale":
      dialect = "mysql";
      // out = "drizzle/mysql";
      // dbCredentials = { url: csMysql };
      schema = "./src/db/schema/mysql.ts";
      // console.info("‚úì MySQL triggered");
      break;
    case "railway":
      if (env.DATABASE_URL?.startsWith("mysql://")) {
        dialect = "mysql";
        // out = "drizzle/mysql";
        // dbCredentials = { url: csMysql };
        schema = "./src/db/schema/mysql.ts";
      } else if (env.DATABASE_URL?.startsWith("postgres://")) {
        dialect = "postgresql";
        // out = "drizzle/pgsql";
        // dbCredentials = { url: csPgsql };
        schema = "./src/db/schema/pgsql.ts";
      } else {
        throw new Error(
          `‚ùå Unsupported DATABASE_URL for NEXT_PUBLIC_DB_PROVIDER '${dbProvider}'.\
          Verify the environment configuration.`,
        );
      }
      break;
    case "vercel":
    case "neon":
    case "private-postgres":
      dialect = "postgresql";
      // out = "drizzle/pgsql";
      // dbCredentials = { url: csPgsql };
      schema = "./src/db/schema/pgsql.ts";
      // console.info("‚úì PostgreSQL triggered");
      break;
    default:
      throw new Error(
        `‚ùå Unsupported NEXT_PUBLIC_DB_PROVIDER '${dbProvider}'.\
        Verify the environment configuration.`,
      );
  }
} catch (error) {
  if (error instanceof Error) {
    // Only the error message will be shown to the user
    console.error(error.message);
    // Exits the process with a failure code
    process.exit(1);
  } else {
    // If for any reason something else was thrown that wasn't an Error handles it
    console.error("‚ùå An unexpected error occurred:", error);
    // Exit with a failure mode
    process.exit(1);
  }
}

// type TMysqlProvider = "railway" | "planetscale";
// type TPgsqlProvider = "vercel" | "neon";
// const mysqlProvider: TMysqlProvider = "railway";
// const pgsqlProvider: TPgsqlProvider = "neon";

// Drizzle Config
export default {
  dialect: "postgresql", // postgresql OR mysql
  out: `./drizzle/${dbProvider === "neon" ? "pgsql" : "mysql"}`, // pgsql: neon|vercel|railway OR mysql: railway|planetscale
  dbCredentials: { url: env.DATABASE_URL },
  tablesFilter: [`${databasePrefix}_*`],
  schema,
} satisfies Config;

// ===== [üöß TODO SECTION üöß] ====================================

// todo: we need to find the way to hook executed `pnpm {dialect}:{cmd}`

// todo: unfinished, checks implementation for the required directories
// import { existsSync } from "fs";
// import { join } from "pathe";
// Check if the required directory exists, throw an error if not
/* try {
  const drizzleDirPath = join(process.cwd(), out);
  if (!existsSync(drizzleDirPath)) {
    throw new Error(
      "üí° The required files in `drizzle` directory do not exist.\
      Please execute `pnpm mysql:generate` (PlanetScale provider),\
      or `pnpm pg:generate` (Neon provider), to generate the necessary\
      files. Afterward, you may retry the previous command.",
    );
  }
} catch (error) {
  if (error instanceof Error) {
    console.error(error.message);
  } else {
    // This block will handle non-Error objects thrown, which is a rare case
    console.error("An unexpected error occurred:", error);
  }
  // Exit with a failure mode
  process.exit(1);
} */

// todo: unfinished, jest fails upon nextjs build
/* type ProviderUrlPrefixes = {
  // Type for the provider names and their corresponding URL prefixes
  [key in "postgres" | "mysql"]?: string;
};
// Map database providers to their expected URL prefixes
const providerUrlPrefixes: ProviderUrlPrefixes = {
  postgres: "postgres://",
  mysql: "mysql://",
};
// Validate essential environment variables and check for URL prefix
if (NEXT_PUBLIC_DB_PROVIDER && env.DATABASE_URL) {
  const expectedPrefix =
    providerUrlPrefixes[
      NEXT_PUBLIC_DB_PROVIDER as
        | "planetscale"
        | "neon"
        | "vercel"
        | "railway"
    ];
  if (expectedPrefix) {
    if (!env.DATABASE_URL.startsWith(expectedPrefix)) {
      console.error(
        `üí° Connection error: The DATABASE_URL does not match the\
        expected format for provider '${NEXT_PUBLIC_DB_PROVIDER}'.\
        Please check the configuration.`,
      );
      process.exit(1);
    }
  } else {
    console.error(
      `üí° Unknown NEXT_PUBLIC_DB_PROVIDER '${NEXT_PUBLIC_DB_PROVIDER}'.\
      Please check the configuration.`,
    );
    process.exit(1);
  }
} else {
  console.error(
    "üí° Essential environment variables are missing. Ensure\
    NEXT_PUBLIC_DB_PROVIDER and DATABASE_URL are set.",
  );
  process.exit(1);
} */
