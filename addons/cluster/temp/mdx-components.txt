// ðŸ”´ DEPRECATED AND POSSIBLY WILL BE REMOVED IN RELIVATOR 1.3.0 ðŸ”´ ||
// Starting Relivator 1.3.0, it can be added by using pnpm reliverse ||
// ================================================================= ||

/* eslint-disable @next/next/no-img-element */
/**
 * This file allows you to provide custom React components
 * to be used in MDX files. You can import and use any React
 * component you want, including components from other libraries.
 * @see https://nextjs.org/docs/app/building-the-application/configuring/mdx
 */

import { MDXComponents } from "mdx/types";
import { ComponentProps, HTMLAttributes, ImgHTMLAttributes } from "react";

import Image from "next/image";

import { MdxCard } from "~/components/modules/cards/mdx-card";
import { Callout } from "~/components/modules/markdown/callout";
import { CodeBlock } from "~/components/modules/markdown/code-block";
import { Alert, AlertDescription, AlertTitle } from "~/components/Primitives/ui/alert";
import { AspectRatio } from "~/components/Primitives/ui/aspect-ratio";
import { cn } from "~/utils";

// These types are required to make the related components work with `useMDXComponent`
// They used to work without these types, but now they don't for some reason
type ImageProps = ComponentProps<typeof Image>;

type AlertProps = ComponentProps<typeof Alert>;

type AlertTitleProps = ComponentProps<typeof AlertTitle>;

type AlertDescriptionProps = ComponentProps<typeof AlertDescription>;

type AspectRatioProps = ComponentProps<typeof AspectRatio>;

const components = {
  Alert: ({ className, ...props }: AlertProps) => <Alert className={cn(className)} {...props} />,
  AlertDescription: ({ className, ...props }: AlertDescriptionProps) => <AlertDescription className={cn(className)} {...props} />,
  AlertTitle: ({ className, ...props }: AlertTitleProps) => <AlertTitle className={cn(className)} {...props} />,
  AspectRatio: ({ className, ...props }: AspectRatioProps) => <AspectRatio className={cn(className)} {...props} />,
  Callout,
  Card: MdxCard,
  Image: ({ alt, className, ...props }: ImageProps) => <Image alt={alt} className={cn(className, "mt-4")} {...props} />,
  a: ({ className, ...props }: HTMLAttributes<HTMLAnchorElement>) => <a className={cn("font-medium underline underline-offset-4", className)} {...props} />,
  blockquote: ({ className, ...props }: HTMLAttributes<HTMLElement>) => <blockquote className={cn("mt-6 border-l-2 pl-6 italic", className)} {...props} />,
  code: ({ className, ...props }: HTMLAttributes<HTMLElement>) => (
    <code className={cn("relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm", className)} {...props} />
  ),
  h1: ({ className, ...props }: HTMLAttributes<HTMLHeadingElement>) => <h1 className={cn("mt-2 scroll-m-20 text-4xl font-bold", className)} {...props} />,
  h2: ({ className, ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h2 className={cn("mt-10 scroll-m-20 border-b pb-2 text-2xl font-semibold tracking-tight first:mt-0", className)} {...props} />
  ),
  h3: ({ className, ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h3 className={cn("mt-8 scroll-m-20 text-xl font-semibold tracking-tight", className)} {...props} />
  ),
  h4: ({ className, ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h4 className={cn("mt-8 scroll-m-20 text-lg font-semibold tracking-tight", className)} {...props} />
  ),
  h5: ({ className, ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h5 className={cn("mt-8 scroll-m-20 text-lg font-semibold tracking-tight", className)} {...props} />
  ),
  h6: ({ className, ...props }: HTMLAttributes<HTMLHeadingElement>) => (
    <h6 className={cn("mt-8 scroll-m-20 text-base font-semibold tracking-tight", className)} {...props} />
  ),
  hr: ({ ...props }: HTMLAttributes<HTMLHRElement>) => <hr className="my-4 md:my-8" {...props} />,

  // biome-ignore lint/a11y/useAltText: <explanation>
  img: ({ alt, className, ...props }: ImgHTMLAttributes<HTMLImageElement>) => <img alt={alt} className={cn("rounded-lg", className)} {...props} />,
  li: ({ className, ...props }: HTMLAttributes<HTMLElement>) => <li className={cn("mt-2", className)} {...props} />,
  ol: ({ className, ...props }: HTMLAttributes<HTMLOListElement>) => <ol className={cn("my-6 ml-6 list-decimal", className)} {...props} />,
  p: ({ className, ...props }: HTMLAttributes<HTMLParagraphElement>) => (
    <p className={cn("text-base leading-7 [&:not(:first-child)]:mt-5", className)} {...props} />
  ),
  pre: CodeBlock,
  table: ({ className, ...props }: HTMLAttributes<HTMLTableElement>) => (
    <div className="my-6 w-full overflow-y-auto">
      <table className={cn("w-full", className)} {...props} />
    </div>
  ),
  td: ({ className, ...props }: HTMLAttributes<HTMLTableCellElement>) => (
    <td className={cn("border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right", className)} {...props} />
  ),
  th: ({ className, ...props }: HTMLAttributes<HTMLTableCellElement>) => (
    <th className={cn("border px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right", className)} {...props} />
  ),
  tr: ({ className, ...props }: HTMLAttributes<HTMLTableRowElement>) => <tr className={cn("m-0 border-t p-0 even:bg-muted", className)} {...props} />,
  ul: ({ className, ...props }: HTMLAttributes<HTMLUListElement>) => <ul className={cn("my-6 ml-6 list-disc", className)} {...props} />,
};

interface MdxProps {
  code: string;
}

export function Mdx({ code }: MdxProps) {
  // @ts-expect-error TODO: Fix
  const Component = useMDXComponents(code);

  return (
    <div className="mdx">
      {/* @ts-expect-error TODO: Fix */}
      <Component components={components} />
    </div>
  );
}

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    // Built-in components customizing, adding styling, and much more other.
    h1: ({ children }) => (
      <h1
        style={{
          fontSize: "64px",
        }}
      >
        {children}
      </h1>
    ),
    ...components,
  };
}
