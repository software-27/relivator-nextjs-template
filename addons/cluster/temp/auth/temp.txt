"use server";

import { cache } from "react";

import { randomBytes, scrypt, timingSafeEqual } from "crypto";

import { redirect } from "next/navigation";
import NextAuth from "next-auth";
import Credentials from "next-auth/providers/credentials";
import Github from "next-auth/providers/github";
import Passkey from "next-auth/providers/passkey";
import { z } from "zod";

import { drizzleAdapter } from "~/auth/adapter";
import { authConfig } from "~/auth/config";
import { db } from "~/db";
import { users } from "~/db/schema";

const log = console;

// createLogger('auth')
async function hash(password: string) {
  return new Promise<string>((resolve, reject) => {
    const salt = randomBytes(16).toString("hex");

    scrypt(password, salt, 64, (error, derivedKey) => {
      if (error) {
        log.error("Error hashing password", error);
        reject(error);
      }

      resolve(`${salt}.${derivedKey.toString("hex")}`);
    });
  });
}

async function compare(password: string, hash: string) {
  return new Promise<boolean>((resolve, reject) => {
    const [salt, hashKey] = hash.split(".");

    // @ts-expect-error TODO: Fix
    scrypt(password, salt, 64, (error, derivedKey) => {
      if (error) {
        log.error("Error comparing password", error);
        reject(error);
      }

      // @ts-expect-error TODO: Fix
      resolve(timingSafeEqual(Buffer.from(hashKey, "hex"), derivedKey));
    });
  });
}

const {
  auth: uncachedAuth,
  handlers: { GET, POST },
  signIn,
  signOut,
} = NextAuth({
  ...authConfig,
  adapter: drizzleAdapter,
  experimental: {
    enableWebAuthn: true,
  },
  logger: {
    debug: (message, metadata) =>
      log.debug(`${message} %o`, {
        metadata,
      }),
    error: (error) => log.error(error),
    warn: (message) => {
      if (message.includes("experimental-webauthn")) {
        // don't spam the console with this
        return;
      }

      log.warn(message);
    },
  },
  providers: [
    Github,
    Passkey,
    Credentials({
      name: "Credentials",
      async authorize(c) {
        const credentials = z
          .object({
            password: z.string().min(6).max(32),
            username: z.string().min(1).max(32),
          })
          .safeParse(c);

        if (!credentials.success) {
          return null;
        }

        try {
          const user = await db.query.users.findFirst({
            where: (fields, ops) =>
              ops.sql`${fields.name} = ${credentials.data.username} COLLATE NOCASE`,
          });

          if (user) {
            if (!user.hashedPassword) {
              log.debug(`OAuth User ${user.id} attempted signin with password`);

              return null;
            }

            const pwMatch = await compare(
              credentials.data.password,
              user.hashedPassword,
            );

            if (!pwMatch) {
              log.debug(`User ${user.id} attempted login with bad password`);

              return null;
            }

            return {
              id: user.id,
              name: user.name,
            };
          }

          // Auto-signup new users - whatever...
          log.debug(`Auto-signup new user ${credentials.data.username}`);
          const result = await db
            .insert(users)
            .values({
              name: credentials.data.username,
              email: `${credentials.data.username}@example.com`,
              hashedPassword: await hash(credentials.data.password),
            })
            .returning();

          if (result.length === 0 || !result[0]) {
            throw new Error("User signup failed");
          }

          const newUser = result[0];

          return {
            id: newUser.id,
            name: newUser.name,
          };
        } catch (error) {
          log.error("Error during user signup", error);

          return null;
        }
      },
    }),
  ],
});

export { GET, POST, signIn, signOut };

export const auth = cache(uncachedAuth);

export const currentUser = cache(async () => {
  const session = await auth();

  // @ts-expect-error TODO: fix
  if (!session) {
    redirect("/");
  }

  // @ts-expect-error TODO: fix
  return session;
});
