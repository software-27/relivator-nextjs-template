import crypto from "crypto";

import dotenv from "dotenv";

dotenv.config();

const hashAlgorithm = "sha256";
const encryptionKey = "ThisIsTheDefaultString32CharLong";

// TODO: for the consideration
// const encryptionKey =
//   process.env.ENCRYPT_DECRYPT_KEY &&
//   process.env.ENCRYPT_DECRYPT_KEY.length === 32
//     ? process.env.ENCRYPT_DECRYPT_KEY
//     : defaultEncryptDecryptKey;

export const hashAnswer = (answer: string): string => {
  return crypto.createHash(hashAlgorithm).update(answer).digest("base64");
};

export const encryptAnswer = (answer: string): string => {
  const iv = crypto.randomBytes(16);
  const cipher = crypto.createCipheriv(
    "aes-256-cbc",
    Buffer.from(encryptionKey),
    iv,
  );

  const encrypted = Buffer.concat([
    cipher.update(answer, "utf8"),
    cipher.final(),
  ]);

  return `${iv.toString("hex")}:${encrypted.toString("hex")}`;
};

export const decryptAnswer = (encrypted: string): string => {
  const [ivHex, encryptedHex] = encrypted.split(":");

  if (!ivHex || !encryptedHex) {
    throw new Error("Invalid encrypted answer format");
  }

  const iv = Buffer.from(ivHex, "hex");
  const encryptedText = Buffer.from(encryptedHex, "hex");

  const decipher = crypto.createDecipheriv(
    "aes-256-cbc",
    Buffer.from(encryptionKey),
    iv,
  );

  const decrypted = Buffer.concat([
    decipher.update(encryptedText),
    decipher.final(),
  ]);

  return decrypted.toString("utf8");
};
