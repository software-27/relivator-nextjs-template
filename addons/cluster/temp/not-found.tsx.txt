// ðŸŸ¡ DEPRECATED AND POSSIBLY WILL BE UPDATED IN RELIVATOR 1.3.0 ðŸŸ¡ ||
// ================================================================= ||
// This file is used to render a 404 page.
// This file serves as Layout for 404 page.
// Visit <NotFoundContent /> to check more.
//
// @see https://next-intl-docs.vercel.app/docs/environments/error-files
// @see https://nextjs.org/docs/app/api-ref/file-conventions/not-found
// @see https://next-intl-docs.vercel.app/docs/environments/server-client-components
// Note that `app/[locale]/[...rest]/page.tsx`
// is necessary for this page to render.
import Balancer from "react-wrap-balancer";

import { ChevronLeft } from "lucide-react";
import Link from "next/link";
import { useTranslations } from "next-intl";

import { buttonVariants } from "~/components/Primitives";
import PageLayout from "~/components/Wrappers/PageLayout";
import { cn } from "~/utils";

// Create a mapping from locale identifiers
// to the specific imported JSON modules
// const localeMessages = {
// "de-de": de_de,
// "en-us": en_us,
// "es-es": es_es,
// "fa-ir": fa_ir,
// "fr-fr": fr_fr,
// "hi-in": hi_in,
// "it-it": it_it,
// "pl-pl": pl_pl,
// "tr-tr": tr_tr,
// "uk-ua": uk_ua,
// "zh-cn": zh_cn,
// };
export default function NotFoundPage() {
  const t = useTranslations("pages.not-found");

  // const locale = getCookie("NEXT_LOCALE")?.toString() || defaultLocale;
  // console.info("locale from cookie", locale); // for debug purposes
  // Use the mapping object to select messages
  // This approach also works without --turbo
  // const messages: AbstractIntlMessages =
  // localeMessages[defaultLocale] || localeMessages["en-us"];
  // localeMessages[locale] || localeMessages["en-us"];
  // When not using next dev --turbo, we can use this:
  //  let messages: AbstractIntlMessages = {};
  // try {
  // messages = require(`~/messages/${locale}.json`);
  // } catch (error) {
  // Assign fallback set of messages when error
  // messages = require("~/messages/en-us.json");
  // consola.error(error); // browser console
  // } */
  return (
    <>
      <PageLayout title={t("title")}>
        <Balancer
          as="p"
          className={`
            mx-auto mt-4 !block leading-normal text-muted-foreground

            sm:text-lg sm:leading-7
          `}
        >
          {t("description")}
        </Balancer>
        <Link
          className={cn(
            buttonVariants({
              size: "default",
              variant: "secondary",
            }),
            "mx-auto mt-6 flex items-center gap-1",
          )}
          href="/"
        >
          <ChevronLeft size={16} />
          <span>{t("go-home")}</span>
        </Link>
      </PageLayout>
      {/* <NextIntlClientProvider
        locale={defaultLocale}
        // locale={locale}
        // Provide only needed messages for NotFound
        messages={pick(messages, ["pages.not-found"])}
      >
        <NotFoundContent />
      </NextIntlClientProvider> */}
    </>
  );
}
