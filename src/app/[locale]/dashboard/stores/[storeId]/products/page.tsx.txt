import type { Metadata } from "next";

import { baseUrl } from "@/browser/shared/utils/url";

// TODO: finish implementing functions in this file
// import { create, all } from 'mathjs';
// import type { ConfigOptions } from 'mathjs';
// const mathjsConfig: ConfigOptions = {
//   relTol: 1e-12,
//   absTol: 1e-15,
//   matrix: 'Matrix',
//   number: 'number',
//   precision: 64,
//   predictable: false,
//   randomSeed: null
// };
// const math = create(all || {}, mathjsConfig);
// import type { Product } from "~/db/schema";
// import { and, asc, desc, eq, inArray, like, sql } from "drizzle-orm";
// import { notFound } from "next/navigation";
// import { GenerateButton } from "~/components/Common/generate";
//
// import { ProductsTableShell } from "~/components/Wrappers/ProductsTableShell";
// import { db } from "~/db";
// import { products, stores } from "~/db/schema";
// import { env } from "~/env";
// const isString = (a: unknown): a is string => typeof a === "string";
export const metadata: Metadata = {
  description: "Manage the products",
  metadataBase: new URL(baseUrl || "http://localhost:3000"),
  title: "Products",
};

// type ProductsPageProps = {
//   params: {
//     storeId: string;
//   };
//   searchParams: Record<string, string | string[] | undefined>;
// };
// export default async function ProductsPage({
//   params,
//   searchParams,
// }: ProductsPageProps) {
export default async function ProductsPage() {
  // const { storeId } = params;
  // const { name, category, page, per_page, sort } =
  //   searchParams ||
  //   {
  //     //
  //   };
  // const store = await db.query.stores.findFirst({
  //   columns: {
  //     id: true,
  //     name: true,
  //   },
  //   where: eq(stores.id, storeId),
  // });
  // if (!store) {
  //   notFound();
  // }
  // // Number of items per page
  // const limit = isString(per_page) ? Number.parseInt(per_page) : 10;
  // // Number of items to skip
  // const offset = isString(page)
  //   ? Number.parseInt(page) > 0
  //     ? (Number.parseInt(page) - 1) * limit
  //     : 0
  //   : 0;
  // // Column and order to sort by
  // const [column, order] = isString(sort)
  //   ? (sort.split(".") as [
  //       keyof Product | undefined,
  //       "asc" | "desc" | undefined,
  //     ])
  //   : [];
  // const categories = isString(category)
  //   ? (category.split(".") as Product["category"][])
  //   : [];
  // // Transaction is used to ensure both queries are executed in a single transaction
  // const { items, total } = await db.transaction(async (tx) => {
  //   const items = await tx
  //     .select()
  //     .from(products)
  //     .limit(limit)
  //     .offset(offset)
  //     .where(
  //       and(
  //         // @ts-expect-error TODO: fix id type
  //         eq(products.storeId, storeId), // Filter by name
  //         isString(name) ? like(products.name, `%${name}%`) : undefined, // Filter by category
  //         categories.length > 0
  //           ? // @ts-expect-error TODO: fix id type
  //             inArray(products.category, categories)
  //           : undefined,
  //       ),
  //     )
  //     .orderBy(
  //       column && column in products
  //         ? order === "asc"
  //           ? asc(products[column])
  //           : desc(products[column])
  //         : desc(products.createdAt),
  //     );
  //   const total = await tx
  //     .select({
  //       count: sql`count(${products.id})`,
  //     })
  //     .from(products)
  //     .where(
  //       and(
  //         // @ts-expect-error TODO: fix id type
  //         eq(products.storeId, storeId),
  //         isString(name) ? like(products.name, `%${name}%`) : undefined,
  //         categories.length > 0
  //           ? // @ts-expect-error TODO: fix id type
  //             inArray(products.category, categories)
  //           : undefined,
  //       ),
  //     )
  //     .then((res) => (res[0] && res[0].count) || 0);
  //   return {
  //     items,
  //     total,
  //   };
  // });
  // // @ts-expect-error TODO: fix
  // const pageCount = math.ceil(total / limit);
  return (
    <div className="space-y-2.5">
      {/* <ProductsTableShell
        data={items}
        pageCount={pageCount}
        storeId={storeId}
      />
      {env.NODE_ENV !== "production" && (
        <>
          <Separator />
          <GenerateButton storeId={storeId} />
        </>
      )} */}
    </div>
  );
}
