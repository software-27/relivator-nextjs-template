import type { Metadata } from "next";
import Link from "next/link";
import { redirect } from "next/navigation";

import { buttonVariants } from "@/browser/reliverse/ui/Button";
import { Card } from "@/browser/reliverse/ui/CardUI";
import { Separator } from "@/browser/reliverse/ui/Separator";
import { baseUrl } from "@/browser/shared/utils/url";
import { getDashboardRedirectPath, getPlanFeatures } from "@/server";
import { CheckIcon } from "@radix-ui/react-icons";
import { desc, eq, sql } from "drizzle-orm";

import type { SubscriptionPlanTypes, UserSubscriptionPlan } from "~/types";

import { authProvider } from "~/auth";
import { authjs } from "~/auth/authjs";
import { clerk } from "~/auth/clerk";
import { PlanManageForm } from "~/components/Forms";
import {
  PageHeader,
  PageHeaderDescription,
  PageHeaderHeading,
} from "~/components/Navigation/PageNavMenu";
import { Shell } from "~/components/Wrappers/ShellVariants";
import { getSubscriptionPlanAction } from "~/core/stripe/actions";
import { storeSubscriptionPlans } from "~/core/stripe/subs";
import { db } from "~/db";
import { products, stores } from "~/db/schema";
import { env } from "~/env";
import { cn, formatDate, formatPrice } from "~/utils";

export default async function BillingPage() {
  const userPlanInfo = await getSubscriptionPlanAction(user.id || "");

  const allStores = await db
    .select({
      id: stores.id,
      name: stores.name,
      description: stores.description,
      stripeAccountId: stores.stripeAccountId,
    })
    .from(stores)
    .leftJoin(products, eq(products.storeId, stores.id))
    .groupBy(stores.id)
    .orderBy(desc(stores.stripeAccountId), desc(sql`count(*)`))
    .where(eq(stores.userId, user.id));

  const subscriptionPlan = await getSubscriptionPlanAction(user.id || "");

  const { maxProductCount, maxStoreCount } = getPlanFeatures(
    // @ts-expect-error TODO: fix
    subscriptionPlan && subscriptionPlan.id,
  );

  return (
    <Shell as="div" variant="sidebar">
      <PageHeader>
        <div className="flex space-x-4">
          <PageHeaderHeading size="sm">Billing</PageHeaderHeading>
          <Link
            aria-label="Create store"
            className={cn(
              buttonVariants({
                size: "sm",
              }),
            )}
            href={getDashboardRedirectPath({
              storeCount: allStores.length,
              subscriptionPlan: subscriptionPlan,
            })}
          >
            Create store
          </Link>
        </div>
        <PageHeaderDescription size="sm">
          Manage the billing and subscription
        </PageHeaderDescription>
      </PageHeader>
      <section
        aria-labelledby="billing-info-heading"
        className="space-y-5"
        id="billing-info"
      >
        <h2
          className={`
            mb-2 text-xl font-semibold

            sm:text-2xl
          `}
        >
          Subscription Plans
        </h2>
        <Card className="grid gap-4 p-6">
          <p className="text-sm text-muted-foreground">
            the current plan is{" "}
            <span className="font-semibold">
              {(subscriptionPlan && subscriptionPlan.name) || "Starter"}
            </span>
            .
            {!userPlanInfo || (userPlanInfo && userPlanInfo.isSubscribed)
              ? " Upgrade to create more stores and products "
              : userPlanInfo.isCanceled
                ? " the plan will be canceled on "
                : " It renews on "}
            {userPlanInfo && userPlanInfo.stripeCurrentPeriodEnd
              ? `${formatDate(userPlanInfo.stripeCurrentPeriodEnd)}. `
              : null}
            This plan allows you to create{" "}
            <span className="font-semibold">up to {maxStoreCount} stores</span>{" "}
            and include{" "}
            <span className="font-semibold">
              up to {maxProductCount} products
            </span>{" "}
            per store.
          </p>
        </Card>
      </section>
      <section
        aria-labelledby="subscription-plans-heading"
        className="space-y-5 pb-2.5"
        id="subscription-plans"
      >
        {env.DEV_DEMO_NOTES === "true" && (
          <p>
            [demo-only-msg] When using buttons below {" -> "} use Stripe Test
            Card data:
            <span className="font-semibold"> 4242424242424242</span>
            <span className="font-light"> | </span>
            <span className="font-semibold">12/34</span>
            <span className="font-light"> | </span>
            <span className="font-semibold">567</span>
          </p>
        )}
        {env.NODE_ENV === "development" && (
          <p
            className={`
              text-red-700

              dark:text-red-500
            `}
          >
            [localhost-notice] Ensure you have correctly filled out the{" "}
            <span className="font-semibold">`.env`</span> file and have{" "}
            <span className="font-semibold">`pnpm stripe:listen`</span> running{" "}
            <span className="font-semibold">before using</span> the buttons
            below.
            <br />
            [localhost-notice]{" "}
            <span className="font-semibold">Buttons are hidden if</span>{" "}
            NEXT_PUBLIC_APP_URL and Stripe environment variable keys are
            missing. Refer to .env.example file.
          </p>
        )}
        <div
          className={`
            grid grid-cols-1 gap-4 p-4 pt-2

            md:-ml-4 md:grid-cols-3
          `}
        >
          {storeSubscriptionPlans.map((planInfo, index) => (
            <SubscriptionPlanCard
              isHighlighted={index === 1}
              isLast={index === storeSubscriptionPlans.length - 1}
              key={planInfo.name}
              planInfo={planInfo}
              userPlanInfo={userPlanInfo}
            />
          ))}
        </div>
      </section>
    </Shell>
  );
}
